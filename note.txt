Building a blog post view
In these text-based steps, we will create a view for a single blog post along with it's associated URL and template. 

Up until now, your user has been able to browse many posts, but now we'll fulfil the user story to view a single blog post.

Prerequisites
1. Move the Open a post user story into In Progress.

Move the Open a post user story into In Progress
2. Set your DEBUG value to True.

Set your DEBUG value to True
Write the code
3. Add a new path for post_detail in the blog/urls.py file.

path('<slug:slug>/', views.post_detail, name='post_detail'),
Note: Don't forget the trailing slash after the slug.

Update path to use slug
4. Within the index.html template's for-loop, update the anchor element to point to the post_detail view.

<a href="{% url 'post_detail' post.slug %}" class="post-link">
Note: This uses the name, post_detail from the urlpattern and the slug variable value is accessed with the same dot notation as seen for author, title, excerpt and so on.

Update post detail anchor in index template
5. Open the blog/views.py file and add a post_detail function-based view.

def post_detail(request, slug):
    """
    Display an individual :model:`blog.Post`.

    **Context**

    ``post``
        An instance of :model:`blog.Post`.

    **Template:**

    :template:`blog/post_detail.html`
    """

    queryset = Post.objects.filter(status=1)
    post = get_object_or_404(queryset, slug=slug)

    return render(
        request,
        "blog/post_detail.html",
        {"post": post},
    )
Add post detail view
6. Append the get_object_or_404 method to the import from django.shortcuts.

from django.shortcuts import render, get_object_or_404
Import get_object_or_404
7. Create an images directory in the existing static directory.

Add an images directory
8. Download a default image from here to your computer. Then upload it to the static/images directory.

Default image
9. Create a new post_detail.html file in the blog/templates/blog directory.

Create a new post_detail.html file 
10. Open the post_detail.html file and add all of the code in this file.

Note: This code includes the link to the static image you just uploaded.

Post detail template
11. Collect the new static files to the staticfiles directory. Type yes when prompted to overwrite the existing files.

python3 manage.py collectstatic
Note: Only the one new image file in static was copied to staticfiles.

Source code

Collect static image file
Deployment
12. Set DEBUG to False. Git add, commit and push the code to GitHub.

git add --all
git commit -m "added post_detail view"
git push origin main
Set DEBUG to False
13. Open your project's Heroku dashboard and click the deploy tab and Deploy Branch.

Deploy main branch.
14. Open the app.

Open the app
15. Click on any of the posts to view it in detail.

Note: The default image is used for all posts