Creating the database
In these text-based steps, we will create an instance of a cloud-based PostgreSQL database and connect it to our project.

Follow the steps below to get up and running.

Create PostgreSQL instance
1. Navigate to PostgreSQL from Code Institute.

PostgreSQL from Code Institute landing page and URL
2. Enter your student email address in the input field provided.

an input field with a student email address entered
3. Click Submit.

a submit button
4. Wait while the database is created.

a loading screen showing cogs in motion
5. Your database is successfully created! Please review the email sent to your student email inbox.

a success page following successful database creation
Connect database to code
6. Return to your workspace and open the codestar/settings.py file. Change the value of DEBUG back to True as this will ensure that you get detailed errors to ease debugging during development.

Set DEBUG constant value to True
7. Create a file named env.py at the top level of the project. You can either create a new file in the file structure or use the terminal command as shown.

Create a Python file
8. Open the .gitignore file and add env.py to prevent the secret data you will add to it from being pushed to GitHub.

Note: If you have used a codeinstitute template then it will be there already.

Prevent env.py being pushed to GitHub repo
9. In your newly created env.py file, import Python's operating system module and use it to set the value of the DATABASE_URL constant to the URL in the email you received from PostgreSQL from Code Institute.

import os

os.environ.setdefault(
    "DATABASE_URL", "<your-database-URL>")
Note: Remember the quotes around the constant and your URL as the setdefault() method expects string values as parameters.

Add DB URL to the env.py file
10. Pip install the two packages required to connect to your PostgreSQL database. Then add them to the requirements file:

pip3 install dj-database-url~=0.5 psycopg2~=2.9
pip3 freeze --local > requirements.txt
Note: psycopg2 is a driver for interacting with PostgreSQL databases using Python. The dj-database-url Python package is a utility to connect Django to a database using a URL.

Pip install db packages
11. In codestar/settings.py, import the appropriate packages (Note: You will use dj_database_url in a later step). Now we connect the settings.py file to the env.py file:

import os
import dj_database_url
if os.path.isfile('env.py'):
    import env
Add imports to settings
12. Next in the settings.py file, we need to comment out the local sqlite3 database connection.

Note: Django provides this local sqlite3 database by default for development, but we are going to go with a production-ready PostgreSQL cloud database instead.

Comment out the sqlite3 db
13. Then, in the settings.py file, connect to the environment variable DATABASE_URL you previously added to the env.py file:

DATABASES = {
    'default': dj_database_url.parse(os.environ.get("DATABASE_URL"))
}
Connect Django to the Database URL
14. Now that your project is connected to the database, you can create database tables with Django's migrate command:

python3 manage.py migrate
Note: These tables are for data generated by the existing apps built into Django.

Create db tables
Enter data into the database
15. Let's enter our first data into the database. As Django comes with built-in auth and admin apps we can create a superuser with admin access to our database:

python3 manage.py createsuperuser
Choose a memorable user name, use your email address and choose a secure password.

Note: Django will check your password security.

Create a new superuser
Deploy the project
16. Return to your workspace and open the codestar/settings.py file. Change the value of DEBUG back to False as this will ensure the production deployed app is secure.

Set the DEBUG value to False
17. Git add, commit and push your updated code to GitHub.

Git push to GitHub
18. Return to your Heroku dashboard and go to your blog app. Click on the Deploy tab.

Click on deploy tab
19. Do a manual deployment.

Manually deploy the app
Connect Heroku to the PostgreSQL database
20. Once the deployment is complete click on Reveal Config Vars in the Settings tab.

Click the setting tab and then Reveal config vars
21. You may see that Heroku has automatically added its own PostgreSQL DATABASE_URL. If so, we want to remove the Postgres database Heroku created and replace it with the free PostgreSQL from Code Institute one as Heroku's PostgreSQL database offering has a monthly fee.

Note: If Heroku has not automatically provisioned a PostgreSQL database add-on, skip to step 25.

Heroku has automatically provisioned a PostgreSQL database add-on
22. To remove the Heroku database, click on the Resources tab.

Click on the resources tab
23. Click Delete Add-on from the drop-down menu to the right of the Heroku Postgres Add-on. Confirm the removal of the add-on by typing your app's name into a popup.

Delete add-on db
24. Now return to Settings and Reveal Config Vars.

Reveal the config vars
25. Add a new config var with a key of DATABASE_URL and the value of the PostgreSQL from Code Institute URL.

Note: You can copy this from your env.py file (minus the quotes) or the email you received from PostgreSQL from Code Institute.

Config vars
26. Now your deployed app is connected to your PostgreSQL cloud database.